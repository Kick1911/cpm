# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/

variables:
  PROJECT_NAME: cpm
  PACKAGE_REGISTRY_BASE_URL: "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic"
  PROJECT_URL: '$PACKAGE_REGISTRY_BASE_URL/$PROJECT_NAME/$CI_COMMIT_TAG/$PROJECT_NAME-$CI_COMMIT_TAG'
  ARCHIVE_NAME: '$PROJECT_NAME-$CI_COMMIT_TAG.tar.gz'
  ARCHIVE_URL: '$PACKAGE_REGISTRY_BASE_URL/$PROJECT_NAME/$CI_COMMIT_TAG/$ARCHIVE_NAME'

stages:
  - test
  - upload
  - release

test_and_build:
  stage: test
  image: gcc
  before_script:
    - apt update && apt -y install make valgrind
  script:
    - make test
    - make clean
    - CFLAGS=-static make prod
    - 'tar -cvzf $ARCHIVE_NAME share'
  artifacts:
    paths:
      - './$PROJECT_NAME'
      - './$ARCHIVE_NAME'

upload:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $PROJECT_NAME $PROJECT_URL
    - |
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $ARCHIVE_NAME $ARCHIVE_URL

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Releasing $CI_COMMIT_TAG"
  release:
    name: 'Release $CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_SHA'
    description: '64bit release $CI_COMMIT_TAG'
    assets:
      links:
        - name: '$PROJECT_NAME'
          url: '$PROJECT_URL'
        - name: '$ARCHIVE_NAME'
          url: '$ARCHIVE_URL'
